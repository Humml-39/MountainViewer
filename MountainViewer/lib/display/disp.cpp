#include <Arduino.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <SPI.h>
#include <Wire.h>
#include "disp.h"

void to_display(char Textsize,char cursor1, char cursor2, String buchstabe);
void print_disp();
void clear_disp();

#define SCREEN_WIDTH 128 // OLED display weite, in pixelen
#define SCREEN_HEIGHT 32 // OLED display höhe, in pixelen

#define splash_width 120      //Splash weite
#define splash_height 32       //Splash Höhe

  const uint8_t PROGMEM splash_data [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x05, 0x00, 0x00, 0x78, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 
  0x00, 0x00, 0x0f, 0x80, 0x00, 0x78, 0x38, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x40, 0x00, 
  0x00, 0x00, 0x18, 0xc0, 0x00, 0x38, 0x78, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x30, 0xc0, 0x00, 0x6c, 0x58, 0x3e, 0x38, 0xc7, 0x78, 0xfc, 0xf8, 0xe3, 0x78, 
  0x00, 0x00, 0x20, 0x40, 0x00, 0x2c, 0x58, 0x63, 0x18, 0x63, 0x98, 0x61, 0x8c, 0x61, 0x8c, 
  0x00, 0x00, 0x60, 0x60, 0x00, 0x66, 0x98, 0xc3, 0x18, 0xc3, 0x18, 0x60, 0x0c, 0x63, 0x8c, 
  0x00, 0x00, 0xc0, 0x60, 0x00, 0x26, 0x98, 0xc1, 0x98, 0x63, 0x0c, 0x60, 0xac, 0x61, 0x8c, 
  0x00, 0x40, 0xc0, 0x30, 0x00, 0x67, 0x98, 0xc3, 0x18, 0xc3, 0x18, 0x61, 0x9c, 0x63, 0x0c, 
  0x00, 0xe1, 0x80, 0x30, 0x00, 0x23, 0x18, 0xe1, 0x98, 0x63, 0x0c, 0x63, 0x0c, 0x61, 0x8c, 
  0x01, 0xb3, 0x00, 0x10, 0x00, 0x61, 0x18, 0x63, 0x1d, 0xc3, 0x18, 0x6b, 0x9c, 0x63, 0x0c, 
  0x03, 0x17, 0x00, 0x18, 0x00, 0x70, 0x1c, 0x3c, 0x0e, 0x67, 0x9c, 0x39, 0xec, 0x73, 0x8e, 
  0x03, 0x1c, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x02, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x06, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x06, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x04, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x0c, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x0c, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x08, 0x00, 0x00, 0x02, 0x00, 0xa0, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x18, 0x00, 0x00, 0x02, 0x00, 0xe0, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x18, 0x00, 0x00, 0x03, 0x00, 0x60, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x10, 0x00, 0x00, 0x01, 0x00, 0x60, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x30, 0x00, 0x00, 0x01, 0x00, 0x31, 0x86, 0x1b, 0x1c, 0x63, 0x8d, 0x8e, 0xe0, 0x00, 0x00, 
  0x30, 0x00, 0x00, 0x01, 0x80, 0x31, 0x06, 0x31, 0x98, 0x61, 0x18, 0xc6, 0x40, 0x00, 0x00, 
  0x20, 0x00, 0x00, 0x00, 0x80, 0x39, 0x06, 0x31, 0xcc, 0xf3, 0x30, 0xc6, 0x00, 0x00, 0x00, 
  0x60, 0x00, 0x00, 0x00, 0x80, 0x1b, 0x06, 0x7f, 0x8c, 0xb2, 0x3f, 0xcc, 0x00, 0x00, 0x00, 
  0x20, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x06, 0x30, 0x06, 0x9a, 0x30, 0x06, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x06, 0x30, 0x07, 0x1c, 0x38, 0x0c, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x06, 0x3b, 0x87, 0x1c, 0x1d, 0x86, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x07, 0x0e, 0x02, 0x08, 0x07, 0x0e, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  };


#define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C // 0x3C für ein Display der Größe 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

void setup_display() {
  Serial.begin(9600);

  // SSD1306_SWITCHCAPVCC = Intern 3.3V für das Display generieren
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Nicht weitergehen, unendlich wiederholen
  }

  
  display.setRotation(2);   //Bildschirminhalt um 180 drehen
  display.clearDisplay();   //Display leeren
  //Logo Mountainviewer als Zeichenkette übergeben
  display.drawBitmap((SCREEN_WIDTH - splash_width) / 2, (SCREEN_HEIGHT - splash_height) / 2,splash_data, splash_width, splash_height, 1);
  display.display();  //Bitmap darstellen
  delay(200); // Pause for 2 seconds
  
  // buffer leeren
  display.clearDisplay();
  delay(200);
  
}


void to_display(char Textsize,char cursor1, char cursor2, String buchstabe) {
  char x=buchstabe.length()+1;    //lenge des Strings von 1 beginend
  char buf[buchstabe.length()];   //Char array erstellen
  
  
  display.setTextSize(Textsize);        //Textgröße auswählen
  display.setTextColor(SSD1306_WHITE); // weißer text ausgeben
  display.setCursor(cursor1, cursor2);  //cursor auf position x y setzen
  display.cp437(true);

  buchstabe.toCharArray(buf,x); //Sring in Char array umwandel
  for (int16_t i = 0; i <= buchstabe.length(); i++) //für jedes zeichen ausgeben
  {
    display.write(buf[i]);
  }

}

void print_disp(){display.display();}       //Display ausgabe funktion
void clear_disp(){display.clearDisplay();}  //Cleaer Display funktion
